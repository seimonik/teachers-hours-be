// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TH.Dal;
using TH.Dal.Enums;

#nullable disable

namespace TH.Dal.Migrations
{
    [DbContext(typeof(TeachersHoursDbContext))]
    [Migration("20240505193653_AddTimeNormsLookupsTable")]
    partial class AddTimeNormsLookupsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "document_types", new[] { "ordinary", "request", "calculation" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TH.Dal.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DocumentTypes>("DocumentType")
                        .HasColumnType("document_types");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TH.Dal.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<int>("EndRow")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentDocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TH.Dal.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("TH.Dal.Entities.TimeNorm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Norm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("TimeNorms", "lookups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53f1740e-f13f-4d5a-8068-e566f5caa87a"),
                            Code = "ProductionPractice",
                            Name = "Производственная практика",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("bdb7ced0-e611-41b3-ba11-9770fd61afc9"),
                            Code = "EducationalPractice",
                            Name = "Учебная практика (НИР)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("4b4b7e08-bcf6-4a63-862a-e596cbc7931d"),
                            Code = "Coursework2",
                            Name = "Норма часов по курсовым работам (2 курс)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("440014d1-fa11-455e-84cf-64bcd8d1b391"),
                            Code = "Coursework3",
                            Name = "Норма часов по курсовым работам (3 курс)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("6b06b872-5147-4658-ba13-66956d196d70"),
                            Code = "Coursework2PO",
                            Name = "Норма часов по курсовым работам для ПО (2 курс)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("b9bd6779-ccf4-440d-809b-7cbaa183cebb"),
                            Code = "Coursework3PO",
                            Name = "Норма часов по курсовым работам для ПО (3 курс)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("e1d63cf1-4672-4619-b116-35d6cf41eca4"),
                            Code = "FinalQualifyingWorkBachelor",
                            Name = "ВКР (бакалавриат)",
                            Norm = 0
                        },
                        new
                        {
                            Id = new Guid("54df6a58-1185-4b46-949d-7287daea86dc"),
                            Code = "FinalQualifyingWorkMagistracy",
                            Name = "ВКР (магистратура)",
                            Norm = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
